import type { JobId, JobType, JobDocument, JobRetryOptions, JobRepeatOptions, JobLogOptions, JobProgressOptions, JobSaveOptions, JobRefreshOptions, JobDoneOptions, JobFailOptions, JobReadyOptions, JobCancelOptions, JobRestartOptions, JobRerunOptions, GetWorkOptions, GetJobOptions, ReadyJobsOptions, Callback, DDPApply } from '../types';
import { JobQueue } from './job-queue';
export declare class Job {
    static readonly forever = 9007199254740992;
    static readonly foreverDate: Date;
    static readonly jobPriorities: {
        readonly low: 10;
        readonly normal: 0;
        readonly medium: -5;
        readonly high: -10;
        readonly critical: -15;
    };
    static readonly jobRetryBackoffMethods: readonly ["constant", "exponential"];
    static readonly jobStatuses: readonly ["waiting", "paused", "ready", "running", "failed", "cancelled", "completed"];
    static readonly jobLogLevels: readonly ["info", "success", "warning", "danger"];
    static readonly jobStatusCancellable: readonly ["running", "ready", "waiting", "paused"];
    static readonly jobStatusPausable: readonly ["ready", "waiting"];
    static readonly jobStatusRemovable: readonly ["cancelled", "completed", "failed"];
    static readonly jobStatusRestartable: readonly ["cancelled", "failed"];
    static readonly ddpMethods: readonly ["startJobs", "stopJobs", "startJobServer", "shutdownJobServer", "jobRemove", "jobPause", "jobResume", "jobReady", "jobCancel", "jobRestart", "jobSave", "jobRerun", "getWork", "getJob", "jobLog", "jobProgress", "jobDone", "jobFail"];
    static readonly ddpPermissionLevels: readonly ["admin", "manager", "creator", "worker"];
    static readonly ddpMethodPermissions: {
        readonly startJobs: readonly ["startJobs", "admin"];
        readonly stopJobs: readonly ["stopJobs", "admin"];
        readonly startJobServer: readonly ["startJobServer", "admin"];
        readonly shutdownJobServer: readonly ["shutdownJobServer", "admin"];
        readonly jobRemove: readonly ["jobRemove", "admin", "manager"];
        readonly jobPause: readonly ["jobPause", "admin", "manager"];
        readonly jobResume: readonly ["jobResume", "admin", "manager"];
        readonly jobCancel: readonly ["jobCancel", "admin", "manager"];
        readonly jobReady: readonly ["jobReady", "admin", "manager"];
        readonly jobRestart: readonly ["jobRestart", "admin", "manager"];
        readonly jobSave: readonly ["jobSave", "admin", "creator"];
        readonly jobRerun: readonly ["jobRerun", "admin", "creator"];
        readonly getWork: readonly ["getWork", "admin", "worker"];
        readonly getJob: readonly ["getJob", "admin", "worker"];
        readonly jobLog: readonly ["jobLog", "admin", "worker"];
        readonly jobProgress: readonly ["jobProgress", "admin", "worker"];
        readonly jobDone: readonly ["jobDone", "admin", "worker"];
        readonly jobFail: readonly ["jobFail", "admin", "worker"];
    };
    static _ddp_apply: DDPApply | Record<string, DDPApply> | undefined;
    root: string;
    private _root;
    private _doc;
    constructor(rootVal: string | {
        root?: string;
    }, type: JobType | JobDocument, data?: Record<string, any>);
    get doc(): JobDocument;
    get type(): JobType;
    get data(): Record<string, any>;
    static _setDDPApply(apply: DDPApply, collectionName?: string): void;
    static setDDP(ddp?: any, collectionNames?: string | string[] | null): void;
    static getWork(root: string, type: JobType | JobType[], options?: GetWorkOptions | Callback, cb?: Callback): Promise<Job | Job[]>;
    static processJobs: typeof JobQueue;
    static getJob(root: string, id: JobId, options?: GetJobOptions | Callback, cb?: Callback): Promise<Job | undefined>;
    static getJobs(root: string, ids: JobId[], options?: GetJobOptions | Callback, cb?: Callback): Promise<Job[]>;
    static pauseJobs(root: string, ids: JobId[], options?: Record<string, any> | Callback, cb?: Callback): Promise<boolean>;
    static resumeJobs(root: string, ids: JobId[], options?: Record<string, any> | Callback, cb?: Callback): Promise<boolean>;
    static readyJobs(root: string, ids?: JobId[], options?: ReadyJobsOptions | Callback, cb?: Callback): Promise<boolean>;
    static cancelJobs(root: string, ids: JobId[], options?: JobCancelOptions | Callback, cb?: Callback): Promise<boolean>;
    static restartJobs(root: string, ids: JobId[], options?: JobRestartOptions | Callback, cb?: Callback): Promise<boolean>;
    static removeJobs(root: string, ids: JobId[], options?: Record<string, any> | Callback, cb?: Callback): Promise<boolean>;
    static startJobs(root: string, options?: Record<string, any> | Callback, cb?: Callback): Promise<boolean>;
    static stopJobs(root: string, options?: Record<string, any> | Callback, cb?: Callback): Promise<boolean>;
    static startJobServer(root: string, options?: Record<string, any> | Callback, cb?: Callback): Promise<boolean>;
    static shutdownJobServer(root: string, options?: {
        timeout?: number;
    } | Callback, cb?: Callback): Promise<boolean>;
    static makeJob(root: string, doc: JobDocument): Job;
    private _echo;
    depends(jobs?: Job | Job[] | null): this;
    priority(level?: number | keyof typeof Job.jobPriorities): this;
    retry(options?: number | JobRetryOptions): this;
    repeat(options?: number | JobRepeatOptions): this;
    delay(wait?: number): this;
    after(time?: Date): this;
    log(message: string, options?: JobLogOptions | Callback, cb?: Callback): Promise<boolean> | this;
    progress(completed?: number, total?: number, options?: JobProgressOptions | Callback, cb?: Callback): Promise<boolean> | this | null;
    save(options?: JobSaveOptions | Callback, cb?: Callback): Promise<JobId>;
    refresh(options?: JobRefreshOptions | Callback, cb?: Callback): Promise<Job | false>;
    done(result?: any, options?: JobDoneOptions | Callback, cb?: Callback): Promise<boolean>;
    fail(result?: any, options?: JobFailOptions | Callback, cb?: Callback): Promise<boolean>;
    pause(options?: Record<string, any> | Callback, cb?: Callback): Promise<boolean> | this;
    resume(options?: Record<string, any> | Callback, cb?: Callback): Promise<boolean> | this;
    ready(options?: JobReadyOptions | Callback, cb?: Callback): Promise<boolean>;
    cancel(options?: JobCancelOptions | Callback, cb?: Callback): Promise<boolean>;
    restart(options?: JobRestartOptions | Callback, cb?: Callback): Promise<boolean>;
    rerun(options?: JobRerunOptions | Callback, cb?: Callback): Promise<JobId>;
    remove(options?: Record<string, any> | Callback, cb?: Callback): Promise<boolean>;
}
export default Job;
//# sourceMappingURL=job-class.d.ts.map